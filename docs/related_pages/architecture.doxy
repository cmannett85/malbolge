/* Cam Mannett 2020
 *
 * See LICENSE file
 */

/** @page architecture Architectural Design and Considerations
 * @tableofcontents
 * 
 * @section actor_model Actor Model
 * At its core, Malbolge uses the
 * <a href="https://en.wikipedia.org/wiki/Actor_model" target="_blank">Actor Model</a>
 * for concurrency and task management, and signals/slots for notification.
 * @image html actor_model.svg height=400px
 * When a method is called on the public API of an actor, the behaviour of the
 * component is not executed immediately, instead a task representing that
 * behaviour is pushed onto a FIFO processing queue and processed once previous
 * tasks have completed.
 * 
 * Because the methods return after pushing the task onto the processing queue,
 * a caller may need another method of being notified when the corresponding
 * task is complete.  There are two approaches used in Malbolge depending on
 * the type of notification:
 * - Signals
 * - Per-task Callback
 * 
 * Signals (shown in the above diagram) are really just a collection of
 * registered function objects that are all called when the signal is 'fired'.
 * If an external object is interested in being notified of an event, it
 * provides the actor with a function object with the same signature as the
 * signal's type.  This function object (a <TT>Callable</TT> C++ concept) then
 * has its bracket operator called with copies of the signal's arguments used
 * when it was called inside the actor.  This process does not involve the
 * processing queue.
 * 
 * Per-task callback is a similar approach, except the that the function object
 * is passed to the actor by the caller as a part of the method call, and is
 * attached to the task as it moves through the processing queue.  Ultimately to
 * be called by the task during processing with the result/error/etc.
 * 
 * Fundamentally these approaches are the same, the key difference is that a
 * signal is @em broadcast - every registered function object is called when a
 * condition is met.  Whilst per-task callbacks only pertain to the caller who
 * initiated the task.
 * 
 * A major of advantage of this system is that the actor is completely decoupled
 * from the entities that require notification from it.
 * 
 * @subsection sync_types Synchronous and Asynchronous Processing
 * This pattern obviously lends itself to asynchronous processing, specifically 
 * that the processing of the queue is done in a dedicated thread (indeed this
 * is how the vCPU works).  In this case the pushing/popping of tasks onto/off
 * of the processing queue is protected by a mutex - there are no other
 * synchronisation primitives in use.
 * 
 * A complexity comes when handling slots (the registered callbacks used by the
 * signalling system), as the slots will all be called from the processing
 * queue's thread.  This is handled in Malbolge by relying on the slot to
 * perform any thread safety actions, as only it knows what concurrency strategy
 * is being used by the caller.  As all the main components in Malbolge use the
 * actor model, this is simply a case of the slot pushing a task onto its own
 * processing queue.
 * 
 * However, it is not a requirement that this pattern is asynchronous.  Indeed
 * other components are synchronous because the lifetime of their processing
 * queue is the lifetime of the application.
 * 
 * @subsection problems Problems with the Design
 * @subsubsection async_getters Getters become Asynchronous
 * Unless you are happy with the concurrency pattern becoming ugly (or just
 * plain breaking!), adding extra synchronisation primitives outside of the
 * processing queue is a bad idea.  But that would be the only way to safely
 * extract state data from an actor.
 * 
 * More importantly, the result of getter becomes undefined as it is not
 * apparent externally what tasks have been completed.  A concrete example of
 * this is in a unit test, imagine this sequence of events:
 * -# method1 called
 * -# method2 called
 * -# getter called
 * The getter's result is either useless because processing hasn't started
 * (synchronous processing queue), or unpredictable (asynchronous).
 * 
 * Malbolge solves this by using using per-task callbacks (described in
 * @ref actor_model "Actor Model").  Because the 'getter callback' is associated
 * with a task, the result is acquired synchronised.  In the example above, the
 * result is acquired @em after method2's task has been executed.
 * 
 * The diagram below shows this process.
 * @image html per_task_callback.svg height=300px
 * A task has been executed in the caller resulting in one of the actor's
 * per-task callback methods being called (red line).  The callback passed to
 * the actor pushes a task onto the caller's processing queue when executed
 * (blue line).  Neither entity is blocked waiting for the other.
 * 
 * @subsubsection actor_performance Performance
 * The management of the registered slots and the processing queue is not free,
 * it consumes both clock cycles and memory.  This is especially evident in
 * the virtual CPU, where every instruction is its own task in the processing
 * queue.
 * 
 * So why use it?  Because it makes the code @em much simpler to understand,
 * @em much easier to debug, and @em much safer.  Malbolge programs are
 * typically tiny, so the performance of the vCPU is less of a concern.
 * 
 * @subsection libs C++ Libraries Used
 * @subsubsection asio_lib Processing Queue
 * Boost.Asio is used for the processing queue (i.e. an <TT>io_context</TT>).
 * It is production-proven, and is currently working its way into the C++
 * standard library
 * (<a href="https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/std_executors.html" target="_blank">"executors"</a>).
 * It is also header-only, making integration simpler.
 * 
 * The Boost library suite is available at https://www.boost.org/.
 * 
 * @subsubsection signal Signals/Slots
 * Although Boost has very good signals support in the form of Boost.Signals2,
 * the version Boost this project targets does not support compiling in C++20
 * due to iterator API changes in the latest standard.  So we have our own
 * simpler version in the form of malbolge::utility::signal.
 * 
 * @section error_handling Error Handling
 * Malbolge makes extensive use of two primary types of error condition:
 * -# Exceptions
 * -# <TT>std::optional</TT>
 * 
 * Which to use depends on the seriousness of the error condition.  The stack 
 * unwinding resulting from throwing an exception is @em very expensive, so
 * should only be done in exceptional circumstances - in Malbolge that is
 * defined as something that would stop program execution within in the vCPU or
 * prevent the program being ran in the first place (e.g. a syntax error).  If
 * the error condition does not meet this expectation, then the error should
 * just be logged.
 * 
 * <TT>std::optional</TT> is useful when implemented a small function that
 * processes some input to give an output, but the input could be malformed in
 * some way.  The small function may be used in multiple contexts where at least
 * one should not stop vCPU execution, and so exceptions are not suitable.  In
 * this case it is up to the caller to check the return and respond accordingly.
 * 
 * All exceptions thrown from Malbolge's code is derived from
 * malbolge::basic_exception.
 * 
 * @subsection asio_throw Throwing from Asynchronous Actors
 * Exceptions contain crucial information about the scenario that caused them to
 * throw, however exceptions cannot cross thread boundaries which poses a
 * problem for asynchronous actors.  Without something special, the best you can
 * do is catch the thrown exception in the thread and log the error - but what
 * if clients of that actor need notifying of an error state?
 * 
 * This solved by creating a <TT>std::exception_ptr</TT> from the thrown
 * exception and passing it to a signal.  This way any interested party can
 * rethrow the exception in a way that is safe and useful for them, and the
 * actor originally throwing the exception can safely close down too.
 */
