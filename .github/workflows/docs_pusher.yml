# Copyright Cam Mannett 2020
#
# See LICENSE file
# 

# This workflow uses Doxygen to generate HTML API documentation, which is then
# pushed to the project's GitHub Pages
name: Documentation Generator

on:
  push:
    branches: [ master ]

jobs:
  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/universe/l/lcov/lcov_1.14-2_all.deb
        wget http://mirrors.kernel.org/ubuntu/pool/main/b/boost1.71/libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb
        sudo apt install doxygen graphviz ./libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb ./lcov_1.14-2_all.deb

    - name: Generate API documentation
      run: |
        mkdir ${GITHUB_WORKSPACE}/../docs
        cd ${GITHUB_WORKSPACE}/../docs
        cmake -DDOCS_ONLY=ON ${GITHUB_WORKSPACE}
        make -j4 documentation

    - name: Generate Unit Test Coverage Report
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_unit_tests
        cd ${GITHUB_WORKSPACE}/../build_unit_tests
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Debug ${GITHUB_WORKSPACE}
        make -j4 malbolge_test_coverage
        ./test/malbolge_test_coverage -l test_suite
        ${GITHUB_WORKSPACE}/test/calculate_test_coverage.sh .
        genhtml malbolge.info --no-function-coverage --title "Malbolge Unit Test Code Coverage" --legend --highlight --output-directory gcov_html
        cp -rf ./gcov_html ${GITHUB_WORKSPACE}/docs/doxygen/html/

    - name: Install Emscripten
      run: |
        cd ${GITHUB_WORKSPACE}/..
        git clone --depth 1 --single-branch --branch 2.0.10 https://github.com/emscripten-core/emsdk.git
        cd ./emsdk/
        ./emsdk install latest-upstream
        ./emsdk activate latest-upstream

    - name: WASM Build
      run: |
        source ${GITHUB_WORKSPACE}/../emsdk/emsdk_env.sh
        mkdir ${GITHUB_WORKSPACE}/../wasm
        cd ${GITHUB_WORKSPACE}/../wasm
        emcmake cmake -DWASM_BUILD=ON -DCMAKE_BUILD_TYPE=Release -DBoost_INCLUDE_DIR=/usr/include ${GITHUB_WORKSPACE}
        emmake make -j4 malbolge_wasm

    - name: Copy over WASM playground
      run: |
        cd ${GITHUB_WORKSPACE}/../wasm
        cp ./malbolge.js ./malbolge.wasm ./malbolge.worker.js ${GITHUB_WORKSPACE}/playground/
        cp -rf ${GITHUB_WORKSPACE}/playground ${GITHUB_WORKSPACE}/docs/doxygen/html/

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        publish_dir: ./docs/doxygen/html
