# Copyright Cam Mannett 2020
#
# See LICENSE file
# 

# This workflow runs a barrage of tests in order to valid a PR
name: Pull Request Checker

on:
  pull_request:
    branches: [ master ]

env:
  DOWNLOAD_DIR: ${GITHUB_WORKSPACE}/../download

jobs:
  # Builds the unit tests and executes them
  unit_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{github.head_ref}}
        token: ${{secrets.PAT_TOKEN}}
        fetch-depth: 1
      
    # Annoyingly I can't find a PPA with the latest lcov, so I have to download
    # the deb manually.  This shouldn't be necessary once the Ubuntu 20.04
    # runner comes out of preview
    - name: Update packages
      run: |
        mkdir ${{ env.DOWNLOAD_DIR }}
        cd ${{ env.DOWNLOAD_DIR }}
        wget http://mirrors.kernel.org/ubuntu/pool/universe/l/lcov/lcov_1.14-2_all.deb
        wget http://mirrors.kernel.org/ubuntu/pool/main/b/boost1.71/libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb
        sudo apt install g++-10 ./libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb ./lcov_1.14-2_all.deb

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_unit_tests
        cd ${GITHUB_WORKSPACE}/../build_unit_tests
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Debug ${GITHUB_WORKSPACE}
        make -j4 malbolge_test_coverage
  
    - name: Run
      run: |
        cd ${GITHUB_WORKSPACE}/../build_unit_tests/test
        ./malbolge_test_coverage -l test_suite

    - name: Calculate unit test coverage
      run: |
        cd ${GITHUB_WORKSPACE}/test
        ./calculate_test_coverage.sh ${GITHUB_WORKSPACE}/../build_unit_tests

    - name: Update README unit test coverage badge
      run: |
        cd ${GITHUB_WORKSPACE}
        BADGE_URL=$(./test/create_badge_url.sh -e)
        sed -i -e "s/https:\/\/img\.shields\.io\/badge\/Unit_Test_Coverage-[0-9\.]\+%25-[a-z]\+/${BADGE_URL}/" ./README.md

    - name: Push updated README and old_coverage
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Updating README.md unit test coverage badge
        file_pattern: README.md test/old_coverage

  # Runs ASan, LSan, and UBSan on the code
  address_sanitizer:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/b/boost1.71/libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb
        sudo apt install g++-10 ./libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb llvm

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_address_sanitizer
        cd ${GITHUB_WORKSPACE}/../build_address_sanitizer
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Debug ${GITHUB_WORKSPACE}
        make -j4 malbolge_address_sanitizer

    - name: Run
      run: |
        cd ${GITHUB_WORKSPACE}/../build_address_sanitizer
        ./malbolge_address_sanitizer ${GITHUB_WORKSPACE}/test/programs/hello_world.mal

  # Runs TSan on the code
  thread_sanitizer:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/b/boost1.71/libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb
        sudo apt install g++-10 ./libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb llvm

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_thread_sanitizer
        cd ${GITHUB_WORKSPACE}/../build_thread_sanitizer
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release ${GITHUB_WORKSPACE}
        make -j4 malbolge_thread_sanitizer

    - name: Run
      run: |
        cd ${GITHUB_WORKSPACE}/../build_thread_sanitizer
        ./malbolge_thread_sanitizer ${GITHUB_WORKSPACE}/test/programs/hello_world.mal

  # Makes sure there is no errors when generating the documentation
  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        sudo apt install doxygen graphviz

    - name: Generate API documentation
      run: |
        mkdir ${GITHUB_WORKSPACE}/../docs
        cd ${GITHUB_WORKSPACE}/../docs
        cmake -DDOCS_ONLY=ON ${GITHUB_WORKSPACE}
        make -j4 documentation

  # Tests archive and Debian package creation and un/installation
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/b/boost1.71/libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/b/boost1.71/libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb
        sudo apt install doxygen graphviz g++-10 ./libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71.0_1.71.0-6ubuntu6_amd64.deb ./libboost-test1.71-dev_1.71.0-6ubuntu6_amd64.deb

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../release
        cd ${GITHUB_WORKSPACE}/../release
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release ${GITHUB_WORKSPACE}
        make -j4 malbolge

    - name: Generate release packages
      run: |
        cd ${GITHUB_WORKSPACE}/../release
        cpack

    - name: Deb package install/uninstall
      run: |
        cd ${GITHUB_WORKSPACE}/../release
        sudo apt install ./malbolge-*-exe.deb
        malbolge ./test/programs/hello_world.mal
        sudo apt install ./malbolge-*-dev.deb
        ls -l /usr/include/malbolge
        file /usr/lib/libmalbolge_lib.a
        sudo apt --assume-yes remove malbolge-dev
        sudo apt --assume-yes remove malbolge-exe

  # Tests WASM build
  wasm:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/b/boost1.71/libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb
        sudo apt install ./libboost1.71-dev_1.71.0-6ubuntu6_amd64.deb

    - name: Install Emscripten
      run: |
        cd ${GITHUB_WORKSPACE}/..
        git clone --depth 1 --single-branch --branch 2.0.6 https://github.com/emscripten-core/emsdk.git
        cd ./emsdk/
        ./emsdk install latest-upstream
        ./emsdk activate latest-upstream

    - name: Build
      run: |
        source ${GITHUB_WORKSPACE}/../emsdk/emsdk_env.sh
        mkdir ${GITHUB_WORKSPACE}/../wasm
        cd ${GITHUB_WORKSPACE}/../wasm
        emcmake cmake -DWASM_BUILD=ON -DCMAKE_BUILD_TYPE=Release -DBoost_INCLUDE_DIR=/usr/include ${GITHUB_WORKSPACE}
        emmake make -j4 malbolge_wasm
