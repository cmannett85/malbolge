# Copyright Cam Mannett 2020
#
# See LICENSE file
# 

# This workflow runs a barrage of tests in order to valid a PR
name: Pull Request Checker

on:
  pull_request:
    branches: [ master ]

jobs:
  # Builds the unit tests and executes them
  unit_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
      
    # Annoyingly I can't find a PPA with the latest lcov, so I have to download
    # the deb manually.  This shouldn't be necessary once the Ubuntu 20.04
    # runner comes out of preview
    - name: Update packages
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/universe/l/lcov/lcov_1.14-2_all.deb
        sudo add-apt-repository ppa:mhier/libboost-latest
        sudo apt install g++-10 libboost1.73-dev ./lcov_1.14-2_all.deb

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_unit_tests
        cd ${GITHUB_WORKSPACE}/../build_unit_tests
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Debug ${GITHUB_WORKSPACE}
        make -j4 malbolge_test_coverage
  
    - name: Run
      run: |
        cd ${GITHUB_WORKSPACE}/../build_unit_tests/test
        ./malbolge_test_coverage -l test_suite

    - name: Calculate unit test coverage
      run: |
        cd ${GITHUB_WORKSPACE}/test
        ./calculate_test_coverage.sh ${GITHUB_WORKSPACE}/../build_unit_tests

  # Runs ASan, LSan, and UBSan on the code
  address_sanitizer:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        sudo add-apt-repository ppa:mhier/libboost-latest
        sudo apt install g++-10 libboost1.73-dev llvm

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_address_sanitizer
        cd ${GITHUB_WORKSPACE}/../build_address_sanitizer
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Debug ${GITHUB_WORKSPACE}
        make -j4 malbolge_address_sanitizer

    - name: Run
      run: |
        cd ${GITHUB_WORKSPACE}/../build_address_sanitizer
        ./malbolge_address_sanitizer ${GITHUB_WORKSPACE}/test/programs/hello_world.mal

  # Runs TSan on the code
  thread_sanitizer:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        sudo add-apt-repository ppa:mhier/libboost-latest
        sudo apt install g++-10 libboost1.73-dev llvm

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../build_thread_sanitizer
        cd ${GITHUB_WORKSPACE}/../build_thread_sanitizer
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release ${GITHUB_WORKSPACE}
        make -j4 malbolge_thread_sanitizer

    - name: Run
      run: |
        cd ${GITHUB_WORKSPACE}/../build_thread_sanitizer
        ./malbolge_thread_sanitizer ${GITHUB_WORKSPACE}/test/programs/hello_world.mal

  # Makes sure there is no errors when generating the documentation
  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        sudo apt install doxygen graphviz
      
    - name: Generate
      run: |
        cd ${GITHUB_WORKSPACE}/docs
        doxygen

  # Tests archive and Debian package creation and un/installation
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Update packages
      run: |
        sudo add-apt-repository ppa:mhier/libboost-latest
        sudo apt install g++-10 libboost1.73-dev

    - name: Build
      run: |
        mkdir ${GITHUB_WORKSPACE}/../release
        cd ${GITHUB_WORKSPACE}/../release
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release ${GITHUB_WORKSPACE}
        make -j4 malbolge

    - name: Generate release packages
      run: |
        cd ${GITHUB_WORKSPACE}/../release
        cpack

    - name: Deb package install/uninstall
      run: |
        cd ${GITHUB_WORKSPACE}/../release
        sudo apt install ./malbolge-*.deb
        malbolge ./test/programs/hello_world.mal
        sudo apt --assume-yes remove malbolge
