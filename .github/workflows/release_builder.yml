# Copyright Cam Mannett 2020
#
# See LICENSE file
# 

# This workflow publishes a release when a tag is pushed to master
name: Release Builder

on:
  push:
    tags:
    - 'v*'

jobs:
  build_tagged_release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Get commit message and percent-encode
      id: commit_msg
      run: |
        MSG=$(git show -s --format=%s%n%n%b $(git log -2 --pretty=%H | tail -n 1))
        echo $MSG
        MSG="${MSG//'%'/'%25'}"
        MSG="${MSG//$'\n'/'%0A'}"
        MSG="${MSG//$'\r'/'%0D'}"
        echo "::set-output name=commit_msg::${MSG}"

    - name: Update packages
      run: |
        sudo add-apt-repository ppa:mhier/libboost-latest
        sudo apt install g++-10 libboost1.73-dev

    - name: Build
      id: build
      run: |
        build_path=${GITHUB_WORKSPACE}/../release
        echo "::set-output name=build_path::${build_path}"
        mkdir ${build_path}
        cd ${build_path}
        cmake -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release ${GITHUB_WORKSPACE}
        make -j4 malbolge

    - name: Generate release packages
      id: gen_release
      run: |
        cd ${{steps.build.outputs.build_path}}
        cpack
        echo "::set-output name=deb_file::$(ls | grep .deb)"
        echo "::set-output name=targz_file::$(ls | grep .tar.gz)"
        echo "::set-output name=sh_file::$(ls | grep .sh)"

    - name: Create GitHub release entry
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{github.ref}}
        release_name: Malbolge ${{github.ref}}
        draft: false
        prerelease: false
        body: ${{steps.commit_msg.outputs.commit_msg}}

    - name: Upload deb
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{steps.build.outputs.build_path}}/${{steps.gen_release.outputs.deb_file}}
        asset_name: ${{steps.gen_release.outputs.deb_file}}
        asset_content_type: application/x-debian-package

    - name: Upload tar.gz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{steps.build.outputs.build_path}}/${{steps.gen_release.outputs.targz_file}}
        asset_name: ${{steps.gen_release.outputs.targz_file}}
        asset_content_type: application/x-debian-package

    - name: Upload self-extracting archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{steps.build.outputs.build_path}}/${{steps.gen_release.outputs.sh_file}}
        asset_name: ${{steps.gen_release.outputs.sh_file}}
        asset_content_type: application/x-debian-package
